name: Manganese CI - Production

on:      
  workflow_call:
    inputs:
      runner_vm:
        required: false
        type: string
        default: "ubuntu-latest"
      # GCP Variables:
      gcp_project_id:
        required: true
        type: string
      gke_cluster:
        required: true
        type: string
      gke_zone:
        required: false
        type: string
        default: "southamerica-east1-b"
      k8s_namespace:
        required: false
        type: string
      artifact_registry_region:
        required: false
        type: string
        default: "southamerica-east1"
      artifact_registry_repo:
        required: false
        type: string
        default: fnzr-repo
      robot_path:
        required: true
        type: string
      values_path:
        required: false
        type: string
        default: values.yaml
      set_values:
        description: "Optional values for --set in helm command"
        required: false
        type: string
    secrets:
      GCP_SERVICE_ACCOUNT_KEY:
        required: true

jobs:
  building:
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    name: Building project
    runs-on:
      labels: ${{inputs.runner_vm}}

    env:
      CI: true
      GCP_PROJECT_ID: ${{inputs.gcp_project_id}}
      ARTIFACT_REGISTRY_HOST: "${{inputs.artifact_registry_region}}-docker.pkg.dev"
      ARTIFACT_REGISTRY_REPO: "${{inputs.artifact_registry_repo}}"
      ROBOT_PATH: ${{inputs.robot_path}}

    outputs:
      project_name: ${{ steps.building.outputs.project_name }}
      image_tag: ${{ steps.building.outputs.image_tag }}
      image_name: ${{ steps.building.outputs.image_name }}

    steps:
      - uses: actions/checkout@v4

      - name: Authenticate to Google Cloud Platform (GCP)
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Setup gcloud CLI
        id: setup-gcloud
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ env.GCP_PROJECT_ID }}

      - name: Configure Docker Auth to Artifact Registry (GCP)
        id: docker-host-auth
        uses: 'docker/login-action@v3'
        with:
          username: 'oauth2accesstoken'
          password: ${{ steps.gcp-auth.outputs.access_token }}
          registry: ${{ env.ARTIFACT_REGISTRY_HOST }}
  
      - name: Create Artifact Registry (If not exists)
        id: create-artifact-registry
        run: |
          gcloud artifacts repositories create ${ARTIFACT_REGISTRY_REPO} --repository-format=docker --location=${{inputs.artifact_registry_region}} || echo 'Docker Repository already exists (probably)'
  
      - name: Prepare website package
        run: |
          set -e

          echo "Variables for robots ROBOTS=${ROBOT_PATH}"

          npm install -f && npm run build

          cp ${ROBOT_PATH} ./root/robots.txt

      - name: Building and Uploading Docker Image to GCP
        id: building
        run: |
          export PROJECT_NAME=${PROJECT_NAME:-`basename "$PWD"`}

          export IMAGE_TAG=${IMAGE_TAG:-"local-`git rev-parse --short HEAD`"}
          export IMAGE_NAME="${ARTIFACT_REGISTRY_HOST}/${GCP_PROJECT_ID}/${ARTIFACT_REGISTRY_REPO}/${PROJECT_NAME}"

          echo "project_name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"
          echo "image_name=$IMAGE_NAME" >> "$GITHUB_OUTPUT"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"

          docker image build \
            -t ${IMAGE_NAME}-latest \
            -t ${IMAGE_NAME}-$IMAGE_TAG \
            -t ${IMAGE_NAME}:pre-build \
            -f Dockerfile_ci .
              
          docker image push ${IMAGE_NAME}-latest
          docker image push ${IMAGE_NAME}-$IMAGE_TAG
          
          echo "################# Uploaded docker image to Docker Repository ##################"
          echo "Pushed image ${IMAGE_NAME}-latest"
          echo "Pushed image ${IMAGE_NAME}-$IMAGE_TAG"
          
          if [[ ${{contains( github.event.pull_request.labels.*.name, 'skip-deploy')}} = 'true' ]]; then
            docker image push ${IMAGE_NAME}:pre-build
            echo "Pushed image ${IMAGE_NAME}:pre-build"
          fi

  deploying:
    if: ${{ !contains( github.event.pull_request.labels.*.name, 'skip-deploy') }}
    name: Deploying project
    runs-on:
      labels: ${{inputs.runner_vm}}
    needs: building

    env:
      CI: true
      VALUES_PATH: ${{inputs.values_path}}
      K8S_NAMESPACE: ${{inputs.k8s_namespace}}
      PROJECT_NAME: ${{needs.building.outputs.project_name}}
      IMAGE_NAME: ${{needs.building.outputs.image_name}}
      IMAGE_TAG: ${{needs.building.outputs.image_tag}}

    steps:
      - name: Authenticate to Google Cloud Platform (GCP)
        id: gcp-auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

      - name: Set up GKE credentials
        id: get-gke-credentials
        uses: google-github-actions/get-gke-credentials@v2
        with:
          cluster_name: ${{ inputs.gke_cluster }}
          location: ${{ inputs.gke_zone }}

      # Install helm
      - name: Install Helm
        id: helm-install
        run: |
          curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

      - name: Deploy the Docker image to the Kubernetes cluster
        id: k8s-deploy
        run: |
          export PROJECT_NAME_TO_K8S_NAMESPACE=$(echo "${PROJECT_NAME}" | tr -cd '[:alnum:]' | tr '[:upper:]' '[:lower:]')
          export K8S_NAMESPACE=${K8S_NAMESPACE:-${PROJECT_NAME_TO_K8S_NAMESPACE}}

          echo "k8s_namespace=$K8S_NAMESPACE" >> "$GITHUB_OUTPUT"

          helm upgrade -i \
            ${PROJECT_NAME} chart/ \
            -n ${K8S_NAMESPACE} --create-namespace \
            -f chart/${VALUES_PATH} \
            --set image.name=${IMAGE_NAME}-${IMAGE_TAG} \
            $(if [ "${{ inputs.set_values }}" ]; then echo "--set ${{ inputs.set_values }} \"; fi)
            --wait --timeout=1h0m0s

          kubectl get services -n ${K8S_NAMESPACE} -o wide

          echo 'Project published successfully'
