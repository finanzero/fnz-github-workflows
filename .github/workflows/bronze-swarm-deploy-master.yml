name: Bronze Swarm CI

on:
    workflow_call:
        inputs:
          service_port:
            required: true
            type: string
          server_swarm:
            required: true
            type: string
          target_platform:    # arm or x86
            required: true
            type: string
          ecr_name:
            required: true
            type: string
          runner_vm:
            required: true
            type: string
          environment:      # beta or prod
            required: true
            type: string
    
        secrets:
          AWS_ACCESS_KEY_ID:
            required: true
          AWS_SECRET_ACCESS_KEY:
            required: true
jobs:
  building:
    name: Deploy
    runs-on:
        labels: ${{inputs.runner_vm}}

    steps:
      - uses: actions/checkout@v1
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
      - uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1
      - name: Define Image Name for Prod builds
        if: inputs.environment == 'prod'
        run: |
            echo "IMAGE_TAG=${{steps.package-version.outputs.current-version}}" >> $GITHUB_ENV
  
      - name: Building and Uploading Docker Image to ECR
        id: building
        run: |          
            export PROJECT_NAME=${PROJECT_NAME:-`basename "$PWD"`}
            export IMAGE_NAME=`aws ecr describe-repositories --repository-names $PROJECT_NAME --output text --region sa-east-1 --query 'repositories[*].repositoryUri'`
            echo "project_name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"
    
            docker buildx build \
                --build-arg ENVIRONMENT="${{inputs.environment}}" \
                --build-arg PORT=${{inputs.service_port}} \
                -t $PROJECT_NAME:${{inputs.target_platform}}-$IMAGE_TAG \
                -t $PROJECT_NAME:${{inputs.target_platform}}-latest \
                -t $IMAGE_NAME:${{inputs.target_platform}}-latest \
                -t $IMAGE_NAME:${{inputs.target_platform}}-$IMAGE_TAG \
                -f ./Dockerfile_ci .
                
            aws ecr create-repository --region sa-east-1 --repository-name ${PROJECT_NAME} >& /dev/null || echo 'Image repository already exists on aws (probably)'
            aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin ${{inputs.ecr_name}}
            
            docker image push $IMAGE_NAME:${{inputs.target_platform}}-latest
            docker image push $IMAGE_NAME:${{inputs.target_platform}}-$IMAGE_TAG
            echo "image_full_name=$IMAGE_NAME:${{inputs.target_platform}}-$IMAGE_TAG" >> $"$GITHUB_OUTPUT"
            
            echo "################# Uploaded docker image to AWS ##################"
            echo "Pushed image $IMAGE_NAME:${{inputs.target_platform}}-latest"
            echo "Pushed image $IMAGE_NAME:${{inputs.target_platform}}-$IMAGE_TAG"
            
      - name: Deploy Prod
        id: deploy
        run: |
            echo "Image fullname: ${{steps.building.outputs.image_full_name}}"
            set -e
            echo "${{ secrets.BO_PRIVATE_KEY }}" > ./aws-key.pem
            chmod 400 ./aws-key.pem
            eval $(ssh-agent)
            ssh-add -k ./aws-key.pem
            mkdir -p ~/.ssh && echo "Host *" > ~/.ssh/config && echo " StrictHostKeyChecking no" >> ~/.ssh/config

            export DOCKER_HOST="ssh://ubuntu@${{inputs.server_swarm}}"

            # aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin 960529452309.dkr.ecr.sa-east-1.amazonaws.com
          
            docker pull ${{steps.building.outputs.image_full_name}}

            VAZIO=false
            COMPOSE=false
            SERVICOS=$(docker service ls -f label=com.docker.stack.namespace= ${{steps.building.outputs.project_name}} --format "{{.Name}}")
            if [ "$SERVICOS" == "" ]; then
                COMPOSE=true
            fi
            if [ $COMPOSE == true ]; then
                echo "Instalando o servico com o docker-compose"

                echo "Validando a versão do package ..."
                VERSAO=`grep -m 1 "amazonaws.com/mis:" tools/docker-compose-prod.yml | cut -d':' -f3`
                if grep -q $VERSAO package.json; then 
                    echo "Versão do package.json compatível com o arquivo docker-compose-prod.yxml"
                else
                    echo "Atualize a versão do arquivo docker-compose-prod.yxml"
                    exit 1
                fi
                docker stack deploy -c tools/docker-compose-prod.yml mis --with-registry-auth --prune
            fi
            if [ $COMPOSE == false ]; then
                echo Atualizando as imagens dos serviços
                for SERV in $SERVICOS; do
                    echo "Atualizando serviço $SERV"
                    docker service update --image ${{steps.building.outputs.image_full_name}} $SERV
                done
            fi

