name: Bronze CI

on:
    workflow_call:
        inputs:
          service_port:
            required: true
            type: string
          servers:
            required: true
            type: string
          target_platform:    # arm or x86
            required: true
            type: string
          ecr_name:
            required: true
            type: string
          runner_vm:
            required: true
            type: string
          environment:      # beta or prod
            required: true
            type: string
    
        secrets:
          AWS_ACCESS_KEY_ID:
            required: true
          AWS_SECRET_ACCESS_KEY:
            required: true
    
jobs:
  building:
    name: Deploy
    runs-on:
        labels: ${{inputs.runner_vm}}

    steps:
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: us-east-2
      - name: get-npm-version
        id: package-version
        uses: martinbeentjes/npm-get-version-action@v1.3.1
    
      - name: Define Image for Beta builds
        if: inputs.environment == 'beta'
        run: |
            echo "IMAGE_TAG=local-$(git rev-parse HEAD)" >> $GITHUB_ENV
      - name: Define Image for Prod builds
        if: inputs.environment == 'prod'
        run: |
            echo "IMAGE_TAG=${{steps.package-version.outputs.current-version}}" >> $GITHUB_ENV
    
      - name: Building and Uploading Docker Image to ECR
        id: building
        run: |          
            export PROJECT_NAME=${PROJECT_NAME:-`basename "$PWD"`}
            export NPM_FINANZERO_SECRET=${NPM_FINANZERO_SECRET:-"$(cat ~/.npmrc)"}
            export IMAGE_NAME=`aws ecr describe-repositories --repository-names $PROJECT_NAME --output text --region sa-east-1 --query 'repositories[*].repositoryUri'`
            echo "project_name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"
  
            docker buildx build --build-arg NPM_RC="$NPM_FINANZERO_SECRET" \
                --build-arg ENVIRONMENT="${{inputs.environment}}" \
                --build-arg PORT=${{inputs.service_port}} \
                -t $PROJECT_NAME:${{inputs.target_platform}}-$IMAGE_TAG \
                -t $PROJECT_NAME:${{inputs.target_platform}}-latest \
                -t $IMAGE_NAME:${{inputs.target_platform}}-latest \
                -t $IMAGE_NAME:${{inputs.target_platform}}-$IMAGE_TAG \
                -f ./Dockerfile_ci .
                
            aws ecr create-repository --region sa-east-1 --repository-name ${PROJECT_NAME} >& /dev/null || echo 'Image repository already exists on aws (probably)'
            aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin ${{inputs.ecr_name}}
            
            docker image push $IMAGE_NAME:${{inputs.target_platform}}-latest
            docker image push $IMAGE_NAME:${{inputs.target_platform}}-$IMAGE_TAG
            echo "image_full_name=$IMAGE_NAME:${{inputs.target_platform}}-$IMAGE_TAG" >> $"$GITHUB_OUTPUT"
            
            echo "################# Uploaded docker image to AWS ##################"
            echo "Pushed image $IMAGE_NAME:${{inputs.target_platform}}-latest"
            echo "Pushed image $IMAGE_NAME:${{inputs.target_platform}}-$IMAGE_TAG"
            
            if [[ ${{contains(github.event.pull_request.labels.*.name, 'skip-deploy')}} = 'true' ]]; then
              docker image tag $PROJECT_NAME:${{inputs.target_platform}}-latest $IMAGE_NAME:pre-build
              docker image push $IMAGE_NAME:pre-build
              echo "Pushed image $IMAGE_NAME:pre-build"
            fi
      - name: Set ssh key for beta
        if: inputs.environment == 'beta'
        run: |
          echo "${{secrets.BETA_SSH_PRIVATE_KEY}} " > ./aws-key.pem
          chmod 400 ./aws-key.pem

      - name: Set ssh key for prod
        if: inputs.environment == 'prod'
        run: |
          echo "${{ secrets.BO_PRIVATE_KEY }}" > ./aws-key.pem
          chmod 400 ./aws-key.pem
   
      - name: Deploy ${{inputs.environment}}
        id: deploy
        if: ${{ !contains( github.event.pull_request.labels.*.name, 'skip-deploy') }}
        # env:
        #     CI: true
        run: |
          echo "Image fullname: ${{steps.building.outputs.image_full_name}}"
          
          for HOST in ${{inputs.servers}}; do
            ssh -o StrictHostKeyChecking=no -i ./aws-key.pem ubuntu@${HOST} '
              set -e
              aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin ${{inputs.ecr_name}}
              docker pull ${{steps.building.outputs.image_full_name}}
              docker container stop ${{steps.building.outputs.project_name}} || echo "No container to stop"
              docker container rm ${{steps.building.outputs.project_name}} || echo "No container to remove"
              aws logs create-log-group --log-group-name ${{steps.building.outputs.project_name}}-syslog-prod || echo "Log group already created"
              docker run -d --log-driver=awslogs --log-opt awslogs-region=sa-east-1 \
                --log-opt awslogs-group=${{steps.building.outputs.project_name}}-syslog-${{inputs.environment}} \
                -p ${{ inputs.service_port }}:${{ inputs.service_port }} \
                --restart always \
                --name ${{steps.building.outputs.project_name}} ${{steps.building.outputs.image_full_name}}
              echo 'Project published successfully on $HOST'
            '
          done
        
      