name: Integration Gold CI - Production

on:      
  workflow_call:
    inputs:
      service_port:
        required: true
        type: string
      servers:
        required: true
        type: string
      target_platform:    # arm or x86
        required: true
        type: string

    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  building:
    name: Building project
    runs-on:
        labels: ${{github.event.inputs.runners_labels}}-runner

    env:
      CI: true
      NPM_FINANZERO_SECRET: ${{secrets.NPM_FINANZERO_SECRET}}
      PORT: ${{github.event.inputs.service_port}}
    outputs:
      project_name: ${{ steps.building.outputs.project_name }}
      image_tag: ${{ steps.building.outputs.image_tag }}
      image_name: ${{ steps.building.outputs.image_name }}
      port: ${{steps.building.outputs.port}}

    steps:
      
      - uses: actions/checkout@v4
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Building and Uploading Docker Image to ECR
        id: building
        run: |          
          export PROJECT_NAME=${PROJECT_NAME:-`basename "$PWD"`}
          export IMAGE_TAG=${IMAGE_TAG:-"local-`git rev-parse --short HEAD`"}
          export NPM_FINANZERO_SECRET=${NPM_FINANZERO_SECRET:-"$(cat ~/.npmrc)"}
          export IMAGE_NAME=`aws ecr describe-repositories --repository-names $PROJECT_NAME --output text --region sa-east-1 --query 'repositories[*].repositoryUri'`
          echo "project_name=$PROJECT_NAME" >> "$GITHUB_OUTPUT"
          echo "port=$PORT" >> "$GITHUB_OUTPUT"
          echo "image_tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"

          docker buildx build --build-arg NPM_RC="$NPM_FINANZERO_SECRET" \
              -t $PROJECT_NAME:${{github.event.inputs.platform}}-$IMAGE_TAG \
              -t $PROJECT_NAME:${{github.event.inputs.platform}}-latest \
              -f ./Dockerfile_${{github.event.inputs.platform}} .
              
          aws ecr create-repository --region sa-east-1 --repository-name ${PROJECT_NAME} >& /dev/null || echo 'Image repository already exists on aws (probably)'
          aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin 960529452309.dkr.ecr.sa-east-1.amazonaws.com
          
          docker image tag $PROJECT_NAME:${{github.event.inputs.platform}}-latest $IMAGE_NAME:${{github.event.inputs.platform}}-latest
          docker image tag $PROJECT_NAME:${{github.event.inputs.platform}}-latest $IMAGE_NAME:${{github.event.inputs.platform}}-$IMAGE_TAG
          docker image push $IMAGE_NAME:${{github.event.inputs.platform}}-latest
          docker image push $IMAGE_NAME:${{github.event.inputs.platform}}-$IMAGE_TAG
          
          echo "################# Uploaded docker image to AWS ##################"
          echo "Pushed image $IMAGE_NAME:${{github.event.inputs.platform}}-latest"
          echo "Pushed image $IMAGE_NAME:${{github.event.inputs.platform}}-$IMAGE_TAG"
          
          if [[ ${{contains( github.event.pull_request.labels.*.name, 'skip-deploy')}} = 'true' ]]; then
            docker image tag $PROJECT_NAME:${{github.event.inputs.platform}}-latest $IMAGE_NAME:pre-build
            docker image push $IMAGE_NAME:pre-build
            echo "Pushed image $IMAGE_NAME:pre-build"
          fi

  deploying:
    if: ${{ !contains( github.event.pull_request.labels.*.name, 'skip-deploy') }}
    name: Deploying ${{github.event.inputs.platform}} project
    runs-on:
      labels: ${{github.event.inputs.platform}}-runner

    needs: building
    env:
      CI: true
      HOSTS: ${{github.event.inputs.servers}}
      PROJECT_NAME: ${{needs.building.outputs.project_name}}
      IMAGE_TAG: ${{needs.building.outputs.image_tag}}
      PORT: ${{github.event.inputs.service_port}}
    
    outputs:
      port: ${{steps.deploying.outputs.port}}
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: sa-east-1

      - name: Deploy on Production Server
        id: deploying
        run: |
          export IMAGE_NAME="960529452309.dkr.ecr.sa-east-1.amazonaws.com/$PROJECT_NAME"
          
          echo $HOSTS
          echo $PROJECT_NAME
          echo $IMAGE_TAG
          echo $IMAGE_NAME
          echo "port=$PORT" >> "$GITHUB_OUTPUT"
          echo "${{ secrets.GOLD_SERVERS }}" > ./aws-key.pem
          chmod 400 ./aws-key.pem

          for HOST in $HOSTS; do
            ssh -o StrictHostKeyChecking=no -i ./aws-key.pem ubuntu@${HOST} '
              aws ecr get-login-password --region sa-east-1 | docker login --username AWS --password-stdin 960529452309.dkr.ecr.sa-east-1.amazonaws.com
              docker pull 960529452309.dkr.ecr.sa-east-1.amazonaws.com/${{needs.building.outputs.project_name}}:${{github.event.inputs.platform}}-${{needs.building.outputs.image_tag}}

              docker container stop ${{needs.building.outputs.project_name}}-prod || echo "No container to stop"
              docker container rm ${{needs.building.outputs.project_name}}-prod || echo "No container to remove"
              aws logs create-log-group --log-group-name ${{needs.building.outputs.project_name}}-syslog-prod || echo "Log group already created"
              docker run -d --log-driver=awslogs --log-opt awslogs-region=sa-east-1 --log-opt awslogs-group=${{needs.building.outputs.project_name}}-syslog-prod -p ${{ needs.building.outputs.port }}:80 --restart always --name ${{needs.building.outputs.project_name}}-prod 960529452309.dkr.ecr.sa-east-1.amazonaws.com/${{needs.building.outputs.project_name}}:${{github.event.inputs.platform}}-${{needs.building.outputs.image_tag}}
              echo 'Project published successfully on $HOST'
            '
          done
